// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace pgncstest {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Utility (and example) to verify that two images are identical. Computes the
	/// maximum difference.
	/// TODO: Add alpha
	/// </summary>
	///
	public class ImgDiff {
		/// <summary>
		/// asume que las imagenes son equivalentes res[0]=maxima diferencia (suma
		/// valores absoluto sobre todos los canales) res[1]=columna en que se produce
		/// ignores alpha
		/// </summary>
		///
		private static int[] ComputeDiffLine(ImageLine l1, ImageLine l2) {
			double maxDif = -1;
			int maxDifCol = -1;
			double dif;
			int channels = l1.imgInfo.channels;
			for (int col = 0; col < l1.imgInfo.cols; col++) {
				dif = Math.Abs(l1.scanline[col * channels] - l2.scanline[col * channels])
						+ Math.Abs(l1.scanline[col * channels + 1] - l2.scanline[col * channels + 1])
						+ Math.Abs(l1.scanline[col * channels + 2] - l2.scanline[col * channels + 2]);
				if (channels == 4)
					dif += Math.Abs(l1.scanline[col * channels + 3] - l2.scanline[col * channels + 3]);
				if (dif > maxDif) {
					maxDif = dif;
					maxDifCol = col;
				}
			}
			return new int[] { (int) (maxDif + 0.5d), maxDifCol };
		}
	
		public static void ShowDiff(String f1, String f2) {
			int maxDif = -1;
			int maxDifCol = -1;
			int maxDifRow = -1;
			PngReader i1 = FileHelper.CreatePngReader(f1);
			PngReader i2 = FileHelper.CreatePngReader(f2);
			System.Console.Out.WriteLine(i1.ToString());
			System.Console.Out.WriteLine(i2.ToString());
			if (i1.imgInfo.channels < 3)
				throw new Exception("Images must be RGB or RGBA");
			if (!i1.imgInfo.Equals(i2.imgInfo))
				throw new Exception("Images must be comparable ");
			int rows = i1.imgInfo.rows;
			for (int row = 0; row < rows; row++) {
				ImageLine l1 = i1.ReadRow(row);
				ImageLine l2 = i2.ReadRow(row);
				int[] res = ComputeDiffLine(l1, l2);
				if (res[0] > maxDif) {
					maxDif = res[0];
					maxDifCol = res[1];
					maxDifRow = row;
				}
			}
			i1.End();
			i2.End();
			if (maxDif == 0)
				System.Console.Out.WriteLine("No diffence");
			else
				System.Console.Out.WriteLine("Images differ. MaxDif={0} [{0} {0}]", maxDif, maxDifCol,
						maxDifRow);
		}
	
		public static void Run(String[] args) {
			if (args.Length != 2) {
				System.Console.Error.WriteLine("Enter two filenames (images to be compared)");
				Environment.Exit(1);
			}
			ShowDiff(args[0], args[1]);
		}
	}
}
