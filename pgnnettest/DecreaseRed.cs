// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace pgncstest {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Example: cuts the red channel by two. Only for RGB
	/// </summary>
	///
	public class DecreaseRed {
		public static void DecreaseRedChannel(String origFilename, String destFilename) {
			PngReader pngr = FileHelper.CreatePngReader(origFilename);
			PngWriter pngw = FileHelper.CreatePngWriter(destFilename, pngr.imgInfo, true);
			System.Console.Out.WriteLine(pngr.ToString());
			// this can copy some metadata from reader
			pngw.CopyChunksFirst(pngr, Ar.Com.Hjg.Pngcs.Chunks.ChunksToWrite.COPY_ALL_SAFE);
			int channels = pngr.imgInfo.channels;
			if (channels < 3)
				throw new Exception("This method is for RGB/RGBA images");
			for (int row = 0; row < pngr.imgInfo.rows; row++) {
				ImageLine l1 = pngr.ReadRow(row);
				for (int j = 0; j < pngr.imgInfo.cols; j++)
					l1.scanline[j * channels] /= 2;
				pngw.WriteRow(l1);
			}
			pngr.End();
			// just in case some new metadata has been read
			pngw.CopyChunksLast(pngr, Ar.Com.Hjg.Pngcs.Chunks.ChunksToWrite.COPY_ALL_SAFE);
			pngw.End();
		}
	
		public static void Run(String[] args) {
			if (args.Length != 2) {
				System.Console.Error.WriteLine("Arguments: [pngsrc] [pngdest]");
				Environment.Exit(1);
			}
			DecreaseRedChannel(args[0], args[1]);
			System.Console.Out.WriteLine("Done");
		}
	}
}
