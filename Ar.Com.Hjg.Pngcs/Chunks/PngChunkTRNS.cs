// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Ar.Com.Hjg.Pngcs.Chunks {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/*
	 */
	public class PngChunkTRNS : PngChunk {
		// http://www.w3.org/TR/PNG/#11tRNS
		// this chunk structure depends on the image type
		// only one of these is meaningful
		private int gray;
		private int red, green, blue;
		private int[] paletteAlpha;
	
		public PngChunkTRNS(ImageInfo info) : base(Ar.Com.Hjg.Pngcs.Chunks.ChunkHelper.tRNS_TEXT, info) {
		}
	
		public override ChunkRaw CreateChunk() {
			ChunkRaw c = null;
			if (imgInfo.greyscale) {
				c = CreateEmptyChunk(2, true);
				Ar.Com.Hjg.Pngcs.PngHelper.WriteInt2tobytes(gray, c.data, 0);
			} else if (imgInfo.indexed) {
				c = CreateEmptyChunk(paletteAlpha.Length, true);
				for (int n = 0; n < c.len; n++) {
					c.data[n] = (byte) paletteAlpha[n];
				}
			} else {
				c = CreateEmptyChunk(6, true);
				Ar.Com.Hjg.Pngcs.PngHelper.WriteInt2tobytes(red, c.data, 0);
				Ar.Com.Hjg.Pngcs.PngHelper.WriteInt2tobytes(green, c.data, 0);
				Ar.Com.Hjg.Pngcs.PngHelper.WriteInt2tobytes(blue, c.data, 0);
			}
			return c;
		}
	
		public override void ParseFromChunk(ChunkRaw c) {
			if (imgInfo.greyscale) {
				gray = Ar.Com.Hjg.Pngcs.PngHelper.ReadInt2fromBytes(c.data, 0);
			} else if (imgInfo.indexed) {
				int nentries = c.data.Length;
				paletteAlpha = new int[nentries];
				for (int n = 0; n < nentries; n++) {
					paletteAlpha[n] = (int) (c.data[n] & 0xff);
				}
			} else {
				red = Ar.Com.Hjg.Pngcs.PngHelper.ReadInt2fromBytes(c.data, 0);
				green = Ar.Com.Hjg.Pngcs.PngHelper.ReadInt2fromBytes(c.data, 2);
				blue = Ar.Com.Hjg.Pngcs.PngHelper.ReadInt2fromBytes(c.data, 4);
			}
		}
	
		public override void CloneDataFromRead(PngChunk other) {
			PngChunkTRNS otherx = (PngChunkTRNS) other;
			gray = otherx.gray;
			red = otherx.red;
			green = otherx.red;
			blue = otherx.red;
			paletteAlpha = otherx.paletteAlpha; // not deep!
		}
	}
}
