// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Ar.Com.Hjg.Pngcs.Chunks {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class ChunkHelper {
		public const String IHDR_TEXT = "IHDR";
		public const String PLTE_TEXT = "PLTE";
		public const String IDAT_TEXT = "IDAT";
		public const String IEND_TEXT = "IEND";
		public const String cHRM_TEXT = "cHRM";// No Before PLTE and IDAT
		public const String gAMA_TEXT = "gAMA";// No Before PLTE and IDAT
		public const String iCCP_TEXT = "iCCP";// No Before PLTE and IDAT
		public const String sBIT_TEXT = "sBIT";// No Before PLTE and IDAT
		public const String sRGB_TEXT = "sRGB";// No Before PLTE and IDAT
		public const String bKGD_TEXT = "bKGD";// No After PLTE; before IDAT
		public const String hIST_TEXT = "hIST";// No After PLTE; before IDAT
		public const String tRNS_TEXT = "tRNS";// No After PLTE; before IDAT
		public const String pHYs_TEXT = "pHYs";// No Before IDAT
		public const String sPLT_TEXT = "sPLT";// Yes Before IDAT
		public const String tIME_TEXT = "tIME";// No None
		public const String iTXt_TEXT = "iTXt";// Yes None
		public const String tEXt_TEXT = "tEXt";// Yes None
		public const String zTXt_TEXT = "zTXt";// Yes None
		public static readonly byte[] IHDR = ToBytes(IHDR_TEXT);
		public static readonly byte[] PLTE = ToBytes(PLTE_TEXT);
		public static readonly byte[] IDAT = ToBytes(IDAT_TEXT);
		public static readonly byte[] IEND = ToBytes(IEND_TEXT);
		public static readonly byte[] cHRM = ToBytes(cHRM_TEXT);
		public static readonly byte[] gAMA = ToBytes(gAMA_TEXT);
		public static readonly byte[] iCCP = ToBytes(iCCP_TEXT);
		public static readonly byte[] sBIT = ToBytes(sBIT_TEXT);
		public static readonly byte[] sRGB = ToBytes(sRGB_TEXT);
		public static readonly byte[] bKGD = ToBytes(bKGD_TEXT);
		public static readonly byte[] hIST = ToBytes(hIST_TEXT);
		public static readonly byte[] tRNS = ToBytes(tRNS_TEXT);
		public static readonly byte[] pHYs = ToBytes(pHYs_TEXT);
		public static readonly byte[] sPLT = ToBytes(sPLT_TEXT);
		public static readonly byte[] tIME = ToBytes(tIME_TEXT);
		public static readonly byte[] iTXt = ToBytes(iTXt_TEXT);
		public static readonly byte[] tEXt = ToBytes(tEXt_TEXT);
		public static readonly byte[] zTXt = ToBytes(zTXt_TEXT);
		public static HashSet<String> KNOWN_CHUNKS_CRITICAL = Ar.Com.Hjg.Pngcs.PngHelper.AsSet(IHDR_TEXT, PLTE_TEXT,
				IDAT_TEXT, IEND_TEXT);
		// ancillary known chunks, before PLTE and IDAT
        public static HashSet<String> KNOWN_CHUNKS_BEFORE_PLTE = Ar.Com.Hjg.Pngcs.PngHelper.AsSet(cHRM_TEXT,
				gAMA_TEXT, iCCP_TEXT, sBIT_TEXT, sRGB_TEXT);
		// ancillary known chunks, after PLTE , before IDAT
        public static HashSet<String> KNOWN_CHUNKS_AFTER_PLTE = Ar.Com.Hjg.Pngcs.PngHelper.AsSet(bKGD_TEXT,
				hIST_TEXT, tRNS_TEXT);
		// ancillary known chunks, before IDAT (before or after PLTE)
        public static HashSet<String> KNOWN_CHUNKS_BEFORE_IDAT = Ar.Com.Hjg.Pngcs.PngHelper.AsSet(pHYs_TEXT,
				sPLT_TEXT);
		// ancillary known chunks, before or after IDAT
        public static HashSet<String> KNOWN_CHUNKS_ANYWHERE = Ar.Com.Hjg.Pngcs.PngHelper.AsSet(tIME_TEXT, iTXt_TEXT,
				tEXt_TEXT, zTXt_TEXT);
        public static HashSet<String> KNOWN_CHUNKS_BEFORE_IDAT_ALL = Ar.Com.Hjg.Pngcs.PngHelper.UnionSets(
				KNOWN_CHUNKS_BEFORE_PLTE, KNOWN_CHUNKS_AFTER_PLTE, KNOWN_CHUNKS_BEFORE_IDAT);
        public static HashSet<String> KNOWN_CHUNKS_ANCILLARY_ALL = Ar.Com.Hjg.Pngcs.PngHelper.UnionSets(
				KNOWN_CHUNKS_BEFORE_IDAT_ALL, KNOWN_CHUNKS_ANYWHERE);
	
		public static bool IsKnown(String id) {
            return KNOWN_CHUNKS_CRITICAL.Contains(id) || KNOWN_CHUNKS_ANCILLARY_ALL.Contains(id);
		}
	
		public static byte[] ToBytes(String x) {
            return Ar.Com.Hjg.Pngcs.PngHelper.charset.GetBytes(x);
		}
	
		public static String ToString(byte[] x) {
            return Ar.Com.Hjg.Pngcs.PngHelper.charset.GetString(x);
		}
	
		public static bool IsCritical(String id) { // critical chunk ?
			// first letter is uppercase
			return (Char.IsUpper(id[0]));
		}
	
		public static bool IsPublic(String id) { // public chunk?
			// second letter is uppercase
			return (Char.IsUpper(id[1]));
		}
	
		public static bool IsSafeToCopy(String id) { // safe to copy?
			// fourth letter is lower case
			return (!Char.IsUpper(id[3]));
		}
	
		public static bool BeforeIDAT(String id) { // only for ancillary
			return KNOWN_CHUNKS_BEFORE_IDAT_ALL.Contains(id);
		}
	
		public static bool BeforePLTE(String id) { // only for ancillary
            return KNOWN_CHUNKS_BEFORE_PLTE.Contains(id);
        }
	
		public static bool AdmitsMultiple(String id) { // only for ancillary
			if (id.Equals(sPLT_TEXT) || id.Equals(iTXt_TEXT) || id.Equals(tEXt_TEXT)
					|| id.Equals(zTXt_TEXT))
				return true;
			else
				return false;
		}
	
		public static int PosNullByte(byte[] b) {
			for (int i = 0; i < b.Length; i++)
				if (b[i] == 0)
					return i;
			return -1;
		}
	
		public static bool ShouldLoad(String id, ChunkLoadBehaviour behav) {
			if (IsCritical(id))
				return true;
			bool kwown = IsKnown(id);
			switch (behav) {
			case Ar.Com.Hjg.Pngcs.Chunks.ChunkLoadBehaviour.LOAD_CHUNK_ALWAYS:
				return true;
			case Ar.Com.Hjg.Pngcs.Chunks.ChunkLoadBehaviour.LOAD_CHUNK_IF_SAFE:
				return kwown || IsSafeToCopy(id);
			case Ar.Com.Hjg.Pngcs.Chunks.ChunkLoadBehaviour.LOAD_CHUNK_KNOWN:
				return kwown;
			case Ar.Com.Hjg.Pngcs.Chunks.ChunkLoadBehaviour.LOAD_CHUNK_NEVER:
				return false;
			}
			return false; // should not reach here
		}
	}
}
