// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Ar.Com.Hjg.Pngcs.Chunks {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/*
	 */
	public class PngChunkICCP : PngChunk {
		// http://www.w3.org/TR/PNG/#11iCCP
		private String profile;
		// TODO: uncompress
		private byte[] compressedProfile;
	
		public PngChunkICCP(ImageInfo info) : base(Ar.Com.Hjg.Pngcs.Chunks.ChunkHelper.iCCP_TEXT, info) {
		}
	
		public override ChunkRaw CreateChunk() {
			ChunkRaw c = CreateEmptyChunk(profile.Length + compressedProfile.Length + 2, true);
			System.Array.Copy((Array)(Ar.Com.Hjg.Pngcs.Chunks.ChunkHelper.ToBytes(profile)),0,(Array)(c.data),0,profile.Length);
			c.data[profile.Length] = 0;
			c.data[profile.Length + 1] = 0;
			System.Array.Copy((Array)(compressedProfile),0,(Array)(c.data),profile.Length + 2,compressedProfile.Length);
			return c;
		}
	
		public override void ParseFromChunk(ChunkRaw chunk) {
			int pos0 = Ar.Com.Hjg.Pngcs.Chunks.ChunkHelper.PosNullByte(chunk.data);
            profile = Ar.Com.Hjg.Pngcs.PngHelper.charset.GetString(chunk.data, 0, pos0);
			int comp = (chunk.data[pos0 + 1] & 0xff);
			if (comp != 0)
				throw new Exception("bad compression for ChunkTypeICCP");
			int compdatasize = chunk.data.Length - (pos0 + 2);
			compressedProfile = new byte[compdatasize];
			System.Array.Copy((Array)(chunk.data),pos0 + 2,(Array)(compressedProfile),0,compdatasize);
		}
	
		public override void CloneDataFromRead(PngChunk other) {
			PngChunkICCP otherx = (PngChunkICCP) other;
			profile = otherx.profile;
			compressedProfile = otherx.compressedProfile; // non deep
		}
	}
}
