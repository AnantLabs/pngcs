// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Ar.Com.Hjg.Pngcs.Chunks {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;

     
     public class PngChunkSBIT : PngChunk {
	 /*
      * // http://www.w3.org/TR/PNG/#11sBIT
	 *  this chunk structure depends on the image type
     */
       
         //	significant bits
	private int graysb,alphasb; 
	private int redsb, greensb, bluesb;

    public PngChunkSBIT(ImageInfo info)
        : base(Ar.Com.Hjg.Pngcs.Chunks.ChunkHelper.sBIT_TEXT, info)
    {
		}

    private int GetLen()
    {
        int len = imgInfo.greyscale ? 1 : 3;
        if (imgInfo.alpha) len += 1;
        return len;
    }

        public override void ParseFromChunk(ChunkRaw c)
        {
            if (c.len != GetLen())
                throw new PngjException("bad chunk length " + c);
            if (imgInfo.greyscale)
            {
                graysb = PngHelper.ReadInt1fromByte(c.data, 0);
                if (imgInfo.alpha)
                    alphasb = PngHelper.ReadInt1fromByte(c.data, 1);
            }
            else
            {
                redsb = PngHelper.ReadInt1fromByte(c.data, 0);
                greensb = PngHelper.ReadInt1fromByte(c.data, 1);
                bluesb = PngHelper.ReadInt1fromByte(c.data, 2);
                if (imgInfo.alpha)
                    alphasb = PngHelper.ReadInt1fromByte(c.data, 3);
            }
        }

		public override ChunkRaw CreateChunk() {
            ChunkRaw c = null;
            c = CreateEmptyChunk(GetLen(), true);
            if (imgInfo.greyscale)
            {
                c.data[0] = (byte)graysb;
                if (imgInfo.alpha)
                    c.data[1] = (byte)alphasb;
            }
            else
            {
                c.data[0] = (byte)redsb;
                c.data[1] = (byte)greensb;
                c.data[2] = (byte)bluesb;
                if (imgInfo.alpha)
                    c.data[3] = (byte)alphasb;
            }
            return c;
		}
	
        
         public override void CloneDataFromRead(PngChunk other) {
             PngChunkSBIT otherx = (PngChunkSBIT)other;
             graysb = otherx.graysb;
             redsb = otherx.redsb;
             greensb = otherx.greensb;
             bluesb = otherx.bluesb;
             alphasb = otherx.alphasb;
		}
	}
}
