// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Ar.Com.Hjg.Pngcs.Chunks {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;


     public class PngChunkSBIT : PngChunkSingle
     {
         public const String ID = ChunkHelper.sBIT;
	 /*
      * // http://www.w3.org/TR/PNG/#11sBIT
	 *  this chunk structure depends on the image type
     */
       
         //	significant bits
	private int graysb,alphasb; 
	private int redsb, greensb, bluesb;

    public PngChunkSBIT(ImageInfo info)
        : base(ID, info)
    {
		}

  	
	public override ChunkOrderingConstraint GetOrderingConstraint() {
		return ChunkOrderingConstraint.BEFORE_PLTE_AND_IDAT;
	}


        public override void ParseFromRaw(ChunkRaw c)
        {
            if (c.Length != GetLen())
                throw new PngjException("bad chunk length " + c);
            if (ImgInfo.Greyscale)
            {
                graysb = PngHelperInternal.ReadInt1fromByte(c.Data, 0);
                if (ImgInfo.Alpha)
                    alphasb = PngHelperInternal.ReadInt1fromByte(c.Data, 1);
            }
            else
            {
                redsb = PngHelperInternal.ReadInt1fromByte(c.Data, 0);
                greensb = PngHelperInternal.ReadInt1fromByte(c.Data, 1);
                bluesb = PngHelperInternal.ReadInt1fromByte(c.Data, 2);
                if (ImgInfo.Alpha)
                    alphasb = PngHelperInternal.ReadInt1fromByte(c.Data, 3);
            }
        }

		public override ChunkRaw CreateRawChunk() {
            ChunkRaw c = null;
            c = createEmptyChunk(GetLen(), true);
            if (ImgInfo.Greyscale)
            {
                c.Data[0] = (byte)graysb;
                if (ImgInfo.Alpha)
                    c.Data[1] = (byte)alphasb;
            }
            else
            {
                c.Data[0] = (byte)redsb;
                c.Data[1] = (byte)greensb;
                c.Data[2] = (byte)bluesb;
                if (ImgInfo.Alpha)
                    c.Data[3] = (byte)alphasb;
            }
            return c;
		}
	
        
         public override void CloneDataFromRead(PngChunk other) {
             PngChunkSBIT otherx = (PngChunkSBIT)other;
             graysb = otherx.graysb;
             redsb = otherx.redsb;
             greensb = otherx.greensb;
             bluesb = otherx.bluesb;
             alphasb = otherx.alphasb;
		}

         private int GetLen()
         {
             int len = ImgInfo.Greyscale ? 1 : 3;
             if (ImgInfo.Alpha) len += 1;
             return len;
         }
	}
}
