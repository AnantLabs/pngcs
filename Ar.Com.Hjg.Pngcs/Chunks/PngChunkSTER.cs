// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Ar.Com.Hjg.Pngcs.Chunks {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/*
	 */
	public class PngChunkSTER : PngChunkSingle {
      	public const String ID = "sTER";
        // http://www.libpng.org/pub/png/spec/register/pngext-1.3.0-pdg.html#C.sTER
        private byte mode; // 0: cross-fuse layout 1: diverging-fuse layout


    public PngChunkSTER(ImageInfo info)
        : base(ID, info)
    {	}
	

	public override ChunkOrderingConstraint GetOrderingConstraint() {
        return ChunkOrderingConstraint.BEFORE_IDAT;
	}

    public override ChunkRaw CreateRawChunk()
    {
        ChunkRaw c = createEmptyChunk(1, true);
        c.Data[0] = (byte)mode;
        return c;
    }

    public override void ParseFromRaw(ChunkRaw chunk)
    {
        if (chunk.Length != 1)
            throw new PngjException("bad chunk length " + chunk);
        mode = chunk.Data[0];
    }

    public override void CloneDataFromRead(PngChunk other)
    {
        PngChunkSTER otherx = (PngChunkSTER)other;
        this.mode = otherx.mode;
    }
    /**
* 0: cross-fuse layout 1: diverging-fuse layout
*/
    public byte GetMode()
    {
        return mode;
    }

    /**
     * 0: cross-fuse layout 1: diverging-fuse layout
     */
    public void SetMode(byte mode)
    {
        this.mode = mode;
    }
	}
}
