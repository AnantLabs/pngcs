// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace Ar.Com.Hjg.Pngcs.Chunks {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/*
	 */
     public class PngChunkSPLT : PngChunkMultiple
     {
        public const  String ID = ChunkHelper.sPLT;

  	// http://www.w3.org/TR/PNG/#11sPLT

	private String palName;
	private int sampledepth; // 8/16
	private int[] palette; // 5 elements per entry

    public PngChunkSPLT(ImageInfo info)
        : base(ID, info)
    {	}
	

	public override ChunkOrderingConstraint GetOrderingConstraint() {
        return ChunkOrderingConstraint.BEFORE_IDAT;
	}
    public override ChunkRaw CreateRawChunk()
    {
        MemoryStream ba = new MemoryStream();
        ChunkHelper.WriteBytesToStream(ba, ChunkHelper.ToBytes(palName));
        ba.WriteByte(0); // separator
        ba.WriteByte((byte)sampledepth);
        int nentries = GetNentries();
        for (int n = 0; n < nentries; n++)
        {
            for (int i = 0; i < 4; i++)
            {
                if (sampledepth == 8)
                    PngHelperInternal.WriteByte(ba, (byte)palette[n * 5 + i]);
                else
                    PngHelperInternal.WriteInt2(ba, palette[n * 5 + i]);
            }
            PngHelperInternal.WriteInt2(ba, palette[n * 5 + 4]);
        }
        byte[] b = ba.ToArray();
        ChunkRaw chunk = createEmptyChunk(b.Length, false);
        chunk.Data = b;
        return chunk;
    }

    public override void ParseFromRaw(ChunkRaw c)
    {
       int t = -1;
		for (int i = 0; i < c.Data.Length; i++) { // look for first zero
			if (c.Data[i] == 0) {
				t = i;
				break;
			}
		}
		if (t <= 0 || t > c.Data.Length - 2)
			throw new PngjException("bad sPLT chunk: no separator found");
		palName = ChunkHelper.ToString(c.Data, 0, t);
		sampledepth = PngHelperInternal.ReadInt1fromByte(c.Data, t + 1);
		t += 2;
		int nentries = (c.Data.Length - t) / (sampledepth == 8 ? 6 : 10);
		palette = new int[nentries * 5];
		int r, g, b, a, f, ne;
		ne = 0;
		for (int i = 0; i < nentries; i++) {
			if (sampledepth == 8) {
				r = PngHelperInternal.ReadInt1fromByte(c.Data, t++);
				g = PngHelperInternal.ReadInt1fromByte(c.Data, t++);
				b = PngHelperInternal.ReadInt1fromByte(c.Data, t++);
				a = PngHelperInternal.ReadInt1fromByte(c.Data, t++);
			} else {
				r = PngHelperInternal.ReadInt2fromBytes(c.Data, t);
				t += 2;
				g = PngHelperInternal.ReadInt2fromBytes(c.Data, t);
				t += 2;
				b = PngHelperInternal.ReadInt2fromBytes(c.Data, t);
				t += 2;
				a = PngHelperInternal.ReadInt2fromBytes(c.Data, t);
				t += 2;
			}
			f = PngHelperInternal.ReadInt2fromBytes(c.Data, t);
			t += 2;
			palette[ne++] = r;
			palette[ne++] = g;
			palette[ne++] = b;
			palette[ne++] = a;
			palette[ne++] = f;
		}
    }

    public override void CloneDataFromRead(PngChunk other)
    {
        PngChunkSPLT otherx = (PngChunkSPLT) other;
		palName = otherx.palName;
		sampledepth = otherx.sampledepth;
		palette = new int[otherx.palette.Length];
		System.Array.Copy(otherx.palette, 0, palette, 0, palette.Length);

    }
    public int GetNentries() {
		return palette.Length / 5;
	}

	public String GetPalName() {
		return palName;
	}

	public void SetPalName(String palName) {
		this.palName = palName;
	}

	public int GetSampledepth() {
		return sampledepth;
	}

	public void SetSampledepth(int sampledepth) {
		this.sampledepth = sampledepth;
	}

	public int[] GetPalette() {
		return palette;
	}

	public void SetPalette(int[] palette) {
		this.palette = palette;
	}

   

	}
}
