// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 namespace pgncstest {
	
	using Ar.Com.Hjg.Pngcs;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Creates a test image (size , bit depth and alpha as arguments) Can choose
	/// between simple gray image or test image with colour gradations As an example
	/// and test.
	/// </summary>
	///
	public class PngCreate {
		/// <summary>
		/// crea imagen de test: primera linea negra, segunda blanca. primera columna
		/// amarilla, ultima verde. Degrade de colores, y alpha transparente abajo a la
		/// izquierda
		/// </summary>
		///
		private static void MakeTestImage(PngWriter png) {
			int cols = png.imgInfo.cols;
			int rows = png.imgInfo.rows;
			bool alpha = png.imgInfo.alpha;
			// int bitspc = png.imgInfo.bitDepth;
			int channels = png.imgInfo.channels;
			int valuesPerRow = png.imgInfo.samplesPerRow;
			ImageLine iline = new ImageLine(png.imgInfo);
			iline.SetRown(0);
			Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, 0, 1.0d);
			Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, 1, 1.0d); // primer columna amarilla
			Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, 2, 0.0d);
			Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, valuesPerRow - channels, 0);
			Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, valuesPerRow - channels + 1, 1.0d); // ultima
																																				// columna
																																				// verde
			Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, valuesPerRow - channels + 2, 0);
			for (int j = 1; j < cols - 1; j++) { // primera fila: blanca
				Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j * channels, 1.0d);
				Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j * channels + 1, 1.0d);
				Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j * channels + 2, 1.0d);
			}
			if (alpha)
				AddAlpha(iline);
			png.WriteRow(iline);
			iline.IncRown();
			for (int j_0 = 1; j_0 < cols - 1; j_0++) { // segunda fila: negra
				Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j_0 * channels, 0.0d);
				Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j_0 * channels + 1, 0.0d);
				Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j_0 * channels + 2, 0.0d);
			}
			if (alpha)
				AddAlpha(iline);
			png.WriteRow(iline);
			iline.IncRown();
			for (; iline.GetRown() < rows; iline.IncRown()) {
				for (int j_1 = 1; j_1 < cols - 1; j_1++) {
					Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j_1 * channels, Clamp((2 * j_1 / cols) - 0.3d, 0, 1.0d));
					Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, j_1 * channels + 1,
							Clamp((2 * iline.GetRown() / rows) - 0.4d, 0, 1.0d));
					Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(
							iline,
							j_1 * channels + 2,
							Clamp(
									(0.55d * System.Math.Sin(13.0d * iline.GetRown() / rows + j_1 * 25.0d / cols) + 0.5d),
									0, 1.0d));
				}
				if (alpha)
					AddAlpha(iline);
				png.WriteRow(iline);
			}
		}
	
		private static void AddAlpha(ImageLine iline) {
			int cols = iline.imgInfo.cols;
			int rows = iline.imgInfo.rows;
			for (int i = 0; i < iline.imgInfo.cols; i++) {
				double alpha;
				if (i == 0 || i == iline.imgInfo.cols - 1 || iline.GetRown() < 2)
					alpha = 1.0d;
				else {
					// opaco arriba a la derecha, transparente abajo izquierda
					double d = Math.Sqrt(((0.5d * i) / cols + 0.0d)
											+ ((0.5d * (rows - iline.GetRown())) / rows + 0.0d)); // entre 0 y 1
					d = d * 1.3d - 0.2d;
					alpha = Clamp(d, 0.0d, 1.0d);
				}
				Ar.Com.Hjg.Pngcs.ImageLineHelper.SetValD(iline, i * 4 + 3, Clamp(alpha, 0, 1.0d)); // asume
																																					// que
																																					// son 4
																																					// canales!
			}
		}
	
		private static double Clamp(double d, double d0, double d1) {
			return (d > d1) ? d1 : ((d < d0) ? d0 : d);
		}
	
		public static void CreateTest1(String orig, int cols, int rows, int bitspc, int channels) {
			if (channels != 3 && channels != 4)
				throw new Exception("bad channels number (must be 3 or 4)");
			PngWriter i2 = FileHelper.CreatePngWriter(orig, new ImageInfo(cols, rows, bitspc,
					channels == 4), true);
			MakeTestImage(i2);
			i2.End(); // cierra el archivo
			System.Console.Out.WriteLine("Done: " + i2.GetFilename());
		}
	
		public static void Run(String[] args) {
			if (args.Length < 5) {
				System.Console.Error.WriteLine("Arguments: [pngdest] [cols] [rows] [bitsc] [channels] [type]");
				System.Console.Error.WriteLine(" Where bitsc=8|16, channels=3|4");
				System.Console.Error
						.WriteLine("type : 0: gray opaque image  1=test image with colors (default) ");
				Environment.Exit(1);
			}
			int type = (args.Length == 6) ? Int32.Parse(args[5]) : 1;
			int cols = Int32.Parse(args[1]);
			int rows = Int32.Parse(args[2]);
			int bitspc = Int32.Parse(args[3]);
			int chan = Int32.Parse(args[4]);
			if (type == 0)
				throw new Exception("no implementado");
			else
				CreateTest1(args[0], cols, rows, bitspc, chan);
		}
	}
}
