// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 6/1/11 9:13 a.m.    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Ar.Com.Hjg.Pngcs.Chunks
{

    using Ar.Com.Hjg.Pngcs;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    /*
     * Palette chunk *this is critical*
     */
    public class PngChunkPLTE : PngChunk
    {
        // http://www.w3.org/TR/PNG/#11PLTE
        public int nentries;
        public int[] entries; // packed xRGB

        public PngChunkPLTE(ImageInfo info)
            : base(Ar.Com.Hjg.Pngcs.Chunks.ChunkHelper.PLTE_TEXT, info)
        {
            this.nentries = 0;
        }

        public override ChunkRaw CreateChunk()
        {
            int len = 3 * nentries;
            int[] rgb = new int[3];
            ChunkRaw c = CreateEmptyChunk(len, true);
            for (int n = 0, i = 0; n < nentries; n++)
            {
                GetEntryRgb(n, rgb);
                c.data[i++] = (byte)rgb[0];
                c.data[i++] = (byte)rgb[1];
                c.data[i++] = (byte)rgb[2];
            }
            return c;
        }

        public override void ParseFromChunk(ChunkRaw chunk)
        {
            SetNentries(chunk.len / 3);
            for (int n = 0, i = 0; n < nentries; n++)
            {
                SetEntry(n, (int)(chunk.data[i++] & 0xff), (int)(chunk.data[i++] & 0xff),
                        (int)(chunk.data[i++] & 0xff));
            }
        }

        public void SetNentries(int n)
        {
            nentries = n;
            if (nentries < 1 || nentries > 256)
                throw new PngjException("invalid pallette - nentries=" + nentries);
            if (entries == null || entries.Length != nentries)
            { // alloc
                entries = new int[nentries];
            }
        }

        public int GetNentries()
        {
            return nentries;
        }

        public void SetEntry(int n, int r, int g, int b)
        {
            entries[n] = ((r << 16) | (g << 8) | b);
        }

        public int GetEntry(int n)
        {
            return entries[n];
        }

        public void GetEntryRgb(int n, int[] rgb)
        {
            GetEntryRgb(n, rgb, 0);
        }

        public void GetEntryRgb(int n, int[] rgb, int offset)
        {
            int v = entries[n];
            rgb[offset + 0] = ((v & 0xff0000) >> 16);
            rgb[offset + 1] = ((v & 0xff00) >> 8);
            rgb[offset + 2] = (v & 0xff);
        }

        public int MinBitDepth()
        {
            if (nentries <= 2)
                return 1;
            else if (nentries <= 4)
                return 2;
            else if (nentries <= 16)
                return 4;
            else
                return 8;
        }

        public override void CloneDataFromRead(PngChunk other)
        {
            PngChunkPLTE otherx = (PngChunkPLTE)other;
            this.SetNentries(otherx.GetNentries());
            System.Array.Copy((Array)(otherx.entries), 0, (Array)(entries), 0, nentries);
        }
    }
}
